{"version":3,"sources":["waves.css","/home/caizhibang/czb/springboot/learn/Cryia/src/components/Dashboard/Template/src/components/Dashboard/Template/index.vue","/home/caizhibang/czb/springboot/learn/Cryia/src/components/Pagination/src/components/Pagination/index.vue","/home/caizhibang/czb/springboot/learn/Cryia/src/views/dashboard/src/views/dashboard/Manage.vue"],"names":[],"mappings":"AAAA,cACI,iBAAkB,CAClB,kBAAmB,CACnB,gCAAqC,CACrC,2BAA4B,CAC5B,mBAAoB,CACpB,wBAAyB,CACzB,qBAAsB,CACtB,oBAAqB,CACrB,gBAAiB,CACjB,0BAA2B,CAE3B,kBAAmB,CACnB,SACJ,CAEA,uBACI,SAAU,CACV,0BAA2B,CAE3B,kBAAmB,CACnB,uEAA0E,CAC1E,+DAAkE,CAClE,uDAA0D,CAC1D,sFACJ,CCgGA,wBACA,aAAA,CACA,qBAAA,CACA,2BAAA,CACA,oBAAA,CACA,SAAA,CACA,QAAA,CACA,UAAA,CACA,mBAAA,CAAA,mBAAA,CAAA,YACA,CAEA,qBACA,oBAAA,CACA,UACA,CACA,wBACA,UAAA,CACA,WACA,CACA,yDACA,oBAAA,CACA,UAAA,CACA,WACA,CACA,0BACA,aAAA,CACA,WAAA,CACA,gBAAA,CACA,qBAAA,CACA,WAAA,CACA,cAAA,CAIA,iBAAA,CAEA,6CAAA,CAEA,qCAAA,CAEA,sCAAA,CAGA,8BACA,CAEA,oCACA,eACA,CAEA,oBACA,sBAAA,CACA,aAAA,CACA,cAAA,CACA,iBAAA,CACA,gBACA,CAEA,oBACA,aAAA,CACA,aAAA,CACA,UAAA,CACA,eAAA,CACA,sBAAA,CACA,kBACA,CAEA,yCACA,qBACA,gBACA,CACA,CCpGA,uCACA,eAAA,CACA,iBACA,CACA,8CACA,YACA,CCmPA,sBACA,aAAA,CACA,cAAA,CACA,WAAA,CACA,iBAAA,CACA,QACA,CAEA,iCACA,wBACA,CAEA,kCACA,wBACA","file":"app.725846c66a3f.css","sourcesContent":[".waves-ripple {\n    position: absolute;\n    border-radius: 100%;\n    background-color: rgba(0, 0, 0, 0.15);\n    background-clip: padding-box;\n    pointer-events: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    -webkit-transform: scale(0);\n    -ms-transform: scale(0);\n    transform: scale(0);\n    opacity: 1;\n}\n\n.waves-ripple.z-active {\n    opacity: 0;\n    -webkit-transform: scale(2);\n    -ms-transform: scale(2);\n    transform: scale(2);\n    -webkit-transition: opacity 1.2s ease-out, -webkit-transform 0.6s ease-out;\n    transition: opacity 1.2s ease-out, -webkit-transform 0.6s ease-out;\n    transition: opacity 1.2s ease-out, transform 0.6s ease-out;\n    transition: opacity 1.2s ease-out, transform 0.6s ease-out, -webkit-transform 0.6s ease-out;\n}","<template>\n  <div :class=\"rootClass\">\n    <ul :class=\"rootClass + '__wrapper'\">\n      <li :class=\"rootClass + '__item'\">\n        <div\n          :class=\"classThumbnail(tplSelected.hash, blankTemplate.hash)\"\n          @click=\"onSelectImage(blankTemplate)\">\n          <div :class=\"rootClass + '__imgcont'\">\n            <img src=\"http://#\"\n                 :height=\"h\"\n                 :width=\"w\"\n                 :class=\"rootClass + '__img'\">\n          </div>\n          <label :class=\"rootClass + '__lbl'\">\n                {{blankTemplate.name}}\n          </label>\n        </div>\n      </li>\n\n      <li v-for=\"(template, index) in templatesLocal\" :key=\"index\"\n        :class=\"rootClass + '__item'\">\n        <div\n          :class=\"classThumbnail(tplSelected.hash, template.hash)\"\n          @click=\"onSelectImage(template)\">\n          <div :class=\"rootClass + '__imgcont'\">\n            <img :src=\"template.imgUrl | fullImgUrl\"\n                 :height=\"h\"\n                 :width=\"w\"\n                 :class=\"rootClass + '__img'\">\n          </div>\n          <label :class=\"rootClass + '__lbl'\">\n                {{template.config.title}}\n          </label>\n        </div>\n      </li>\n    </ul>\n\n    <div v-show=\"imgPreview\">\n      <label>大屏预览</label>\n      <img :src=\"tplSelected.imgUrl | fullImgUrl\"\n            :height=\"h\"\n            :width=\"w\"\n            :class=\"rootClass + '__img'\">\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'TemplateAlbum',\n  filters: {\n    fullImgUrl (url) {\n      return process.env.BASE_API + url\n    }\n  },\n  props: {\n    templates: {\n      type: Array,\n      default: () => []\n    },\n    rootClass: {\n      type: String,\n      default: 'template-list'\n    },\n    activeClass: {\n      type: String,\n      default: '--selected'\n    },\n    h: {\n      type: String,\n      default: 'auto'\n    },\n    w: {\n      type: String,\n      default: 'auto'\n    }\n  },\n  data () {\n    return {\n      tplSelected: {\n        hash: ''\n      },\n      blankTemplate: {\n        hash: 'blank',\n        name: '空白模板'\n      },\n      imgPreview: false\n    }\n  },\n  computed: {\n    templatesLocal: function () {\n      return this.templates || []\n    }\n  },\n  methods: {\n    classThumbnail (selectedId, imageId) {\n      const baseClass = `${this.rootClass}__thumbnail`\n      if (selectedId === imageId) {\n        return `${baseClass} ${baseClass}${this.activeClass}`\n      }\n      return `${baseClass}`\n    },\n    onSelectImage (objectImage) {\n      this.tplSelected = Object.assign({}, this.tplSelected, objectImage)\n      this.imgPreview = (this.tplSelected.hash !== this.blankTemplate.hash)\n      this.$emit('onselect', objectImage)\n    },\n    removeFromimgSelected () {\n      this.imgPreview = false\n      this.tplSelected = {}\n      this.$emit('onselect', {})\n    }\n  },\n  watch: {\n    templates: function () {\n      this.removeFromimgSelected()\n    }\n  }\n}\n</script>\n<style>\n.template-list__wrapper {\n  overflow: auto;\n  list-style-image: none;\n  list-style-position: outside;\n  list-style-type: none;\n  padding: 0px;\n  margin: 0px;\n  width:auto;\n  display: flex;\n}\n\n.template-list__item {\n  margin: 0px 12px 12px 0px;\n  float: left;\n}\n.template-list__imgcont{\n  width: 100%;\n  height: 90px;\n}\n.template-list__imgcont img,.template-list__imgcont span{\n  display: inline-block;\n  width:100%;\n  height:100%;\n}\n.template-list__thumbnail{\n  display: block;\n  padding: 4px;\n  line-height: 20px;\n  border: 1px solid #ddd;\n  width: 160px;\n  cursor: pointer;\n\n  -webkit-border-radius: 4px;\n  -moz-border-radius: 4px;\n  border-radius: 4px;\n\n  -webkit-box-shadow: 0 1px 3px rgba(0, 0, 0, 0.055);\n  -moz-box-shadow: 0 1px 3px rgba(0, 0, 0, 0.055);\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.055);\n\n  -webkit-transition: all 0.2s ease-in-out;\n  -moz-transition: all 0.2s ease-in-out;\n  -o-transition: all 0.2s ease-in-out;\n  transition: all 0.2s ease-in-out;\n}\n\n.template-list__thumbnail--selected{\n  background: #eeeeee;;\n}\n\n.template-list__img{\n  -webkit-user-drag: none;\n  display: block;\n  max-width: 100%;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n.template-list__lbl{\n  display: block;\n  line-height: 3;\n  width:100%;\n  overflow:hidden;\n  text-overflow:ellipsis;\n  white-space:nowrap;\n}\n\n@media only screen and (max-width: 200px) {\n  .template-list__item {\n    margin-left: 30px;\n  }\n}\n</style>\n","<template>\n  <div :class=\"{'hidden':hidden}\" class=\"pagination-container\">\n    <el-pagination\n      :background=\"background\"\n      :current-page.sync=\"currentPage\"\n      :page-size.sync=\"pageSize\"\n      :layout=\"layout\"\n      :page-sizes=\"pageSizes\"\n      :total=\"total\"\n      v-bind=\"$attrs\"\n      @size-change=\"handleSizeChange\"\n      @current-change=\"handleCurrentChange\"/>\n  </div>\n</template>\n\n<script>\nimport { scrollTo } from '@/scripts/scrollTo'\n\nexport default {\n  name: 'Pagination',\n  props: {\n    total: {\n      required: true,\n      type: Number\n    },\n    page: {\n      type: Number,\n      default: 1\n    },\n    limit: {\n      type: Number,\n      default: 20\n    },\n    pageSizes: {\n      type: Array,\n      default () {\n        return [10, 20, 30, 50]\n      }\n    },\n    layout: {\n      type: String,\n      default: 'total, sizes, prev, pager, next, jumper'\n    },\n    background: {\n      type: Boolean,\n      default: true\n    },\n    autoScroll: {\n      type: Boolean,\n      default: true\n    },\n    hidden: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    currentPage: {\n      get () {\n        return this.page\n      },\n      set (val) {\n        this.$emit('update:page', val)\n      }\n    },\n    pageSize: {\n      get () {\n        return this.limit\n      },\n      set (val) {\n        this.$emit('update:limit', val)\n      }\n    }\n  },\n  methods: {\n    handleSizeChange (val) {\n      this.$emit('pagination', { page: this.currentPage, limit: val })\n      if (this.autoScroll) {\n        scrollTo(0, 800)\n      }\n    },\n    handleCurrentChange (val) {\n      this.$emit('pagination', { page: val, limit: this.pageSize })\n      if (this.autoScroll) {\n        scrollTo(0, 800)\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.pagination-container {\n  background: #fff;\n  padding: 32px 16px;\n}\n.pagination-container.hidden {\n  display: none;\n}\n</style>\n","<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input :placeholder=\"'大屏名称'\" v-model=\"listQuery.title\" clearable style=\"width: 200px;\" class=\"filter-item\" @keyup.enter.native=\"handleFilter\"/>\n\n      <el-select v-model=\"listQuery.status\" :placeholder=\"'发布状态'\" clearable class=\"filter-item\" style=\"width: 130px\">\n        <el-option v-for=\"(key, value) in publishTypeOptions\" :key=\"key\" :label=\"key\" :value=\"value\"/>\n      </el-select>\n      <el-button v-waves class=\"filter-item\" type=\"primary\" icon=\"el-icon-search\" @click=\"handleFilter\">{{ '搜索' }}</el-button>\n      <el-button class=\"filter-item\" style=\"margin-left: 10px;\" type=\"primary\" icon=\"el-icon-edit\" @click=\"handleCreate\">{{ '新建' }}</el-button>\n    </div>\n\n    <el-table\n      v-loading=\"listLoading\"\n      :key=\"tableKey\"\n      :data=\"list\"\n      border\n      fit\n      highlight-current-row\n      style=\"width: 100%;\"\n      @sort-change=\"sortChange\">\n      <el-table-column :label=\"'序号'\" prop=\"id\" align=\"center\" width=\"60\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.sequenceNumber }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"'名称'\" min-width=\"150px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.config.title }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"'链接'\" min-width=\"250px\">\n        <template slot-scope=\"scope\" >\n          <div v-show=\"scope.row.publish.status === 'published'\">\n            <el-link type=\"primary\" :href=\"scope.row.publish.hash | pubUrlFilter\" target=\"_blank\">{{ scope.row.publish.hash | pubUrlFilter }}</el-link>\n            <el-tooltip effect=\"dark\" :content=\"'复制'\" placement=\"bottom\">\n              <el-button size=\"mini\" type=\"success\" icon=\"el-icon-document\" @click=\"handleCopy(scope.row.publish.hash, $event)\" circle></el-button>\n            </el-tooltip>\n            <el-tooltip effect=\"dark\" :content=\"'下载'\" placement=\"bottom\">\n              <el-button size=\"mini\" type=\"primary\" icon=\"el-icon-download\" @click=\"handleDownload(scope.row.publish.hash)\" circle></el-button>\n            </el-tooltip>\n          </div>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"'状态'\" class-name=\"status-col\" width=\"100\">\n        <template slot-scope=\"scope\">\n          <el-tooltip :disabled=\"scope.row | needRepublish\" :content=\"'内容已更新, 未重新发布'\" placement=\"bottom\">\n            <el-badge is-dot style=\"margin-top: 3px;\" :hidden=\"scope.row | needRepublish\">\n              <el-tag :type=\"scope.row.publish.status\">{{ scope.row.publish.status | statusFilter}}</el-tag>\n            </el-badge>\n          </el-tooltip>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"'操作'\" align=\"center\" width=\"400\" class-name=\"small-padding fixed-width\">\n        <template slot-scope=\"scope\">\n          <el-button size=\"mini\" type=\"primary\" @click=\"handlePreview(scope.row.hash)\">{{ '预览' }}</el-button>\n          <el-button size=\"mini\" type=\"success\" @click=\"handleDesign(scope.row.hash)\">{{ '编辑' }}</el-button>\n          <el-button size=\"mini\" type=\"warning\" @click=\"handleClone(scope.row.hash, scope.row.config.title)\">{{ '克隆' }}</el-button>\n          <!-- 发布管理 -->\n          <div style=\"display:inline-block; padding-left:10px\">\n            <el-dropdown trigger=\"click\" placement=\"bottom\" @command=\"handlePublish\">\n              <el-button size=\"mini\" type=\"info\">{{ '发布' }}</el-button>\n              <el-dropdown-menu slot=\"dropdown\">\n                <el-tooltip effect=\"dark\" :content=\"'删除已发布链接'\" placement=\"left\">\n                  <el-dropdown-item\n                    icon=\"el-icon-remove-outline\"\n                    v-show=\"scope.row.publish.status === 'published'\"\n                    :command=\"{hash:scope.row.hash, cmd:'unpublish'}\">\n                    {{ '停止发布' }}\n                  </el-dropdown-item>\n                </el-tooltip>\n                <el-tooltip effect=\"dark\" :content=\"'生成一个新的链接'\" placement=\"left\">\n                  <el-dropdown-item\n                    icon=\"el-icon-circle-plus-outline\"\n                    v-show=\"scope.row.publish.status === 'unpublish'\"\n                    :command=\"{hash:scope.row.hash, cmd:'published'}\">\n                    {{' 公开发布 '}}\n                  </el-dropdown-item>\n                </el-tooltip>\n\n                <el-tooltip effect=\"dark\" :content=\"'更新已发布链接的内容'\" placement=\"left\">\n                  <el-dropdown-item\n                    icon=\"el-icon-refresh\"\n                    v-show=\"scope.row.publish.status === 'published' && scope.row.config.timestamp > scope.row.publish.timestamp\"\n                    :command=\"{hash:scope.row.hash, cmd:'republish'}\">\n                    {{' 重新发布 '}}\n                  </el-dropdown-item>\n                </el-tooltip>\n              </el-dropdown-menu>\n            </el-dropdown>\n          </div>\n\n          <div style=\"display:inline-block; padding-left:10px\">\n            <el-popover  placement=\"bottom\" width=\"200\" :ref=\"`popover-${scope.$index}`\">\n              <p>{{ '确定要删除大屏' + scope.row.config.title + '吗?' }} </p>\n              <div style=\"text-align: right; margin: 0\">\n                <el-button size=\"mini\" type=\"text\" @click=\"scope._self.$refs[`popover-${scope.$index}`].doClose()\">{{ '取消' }}</el-button>\n                <el-button size=\"mini\" type=\"primary\" @click=\"scope._self.$refs[`popover-${scope.$index}`].doClose() === handleDelete(scope.row)\">{{ '确定' }}</el-button>\n              </div>\n              <el-button size=\"mini\" type=\"danger\" slot=\"reference\">{{ '删除' }}</el-button>\n            </el-popover>\n          </div>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <pagination v-show=\"total > 0\" :total=\"total\" :page.sync=\"listQuery.page\" :limit.sync=\"listQuery.limit\" @pagination=\"getList\" />\n\n    <!--新建大屏-->\n    <el-dialog :title=\"dialogTitle\" :visible.sync=\"dialogFormVisible\">\n      <el-form ref=\"dataForm\" :model=\"createTable\" label-position=\"top\" label-width=\"70px\">\n        <el-form-item :label=\"'大屏名称'\" :placeholder=\"'请输入大屏名称'\" prop=\"title\">\n          <el-input v-model=\"createTable.name\"/>\n        </el-form-item>\n\n        <el-form-item :label=\"'选择模板'\" v-show=\"this.templateList\">\n          <template-list\n            :templates=\"templateList\"\n            @onselect=\"onSelectTemplate\">\n          </template-list>\n        </el-form-item>\n\n        <el-form-item :label=\"'大屏简介'\">\n          <el-input type=\"textarea\" :rows=\"3\" :placeholder=\"'请填写关于大屏的描述信息'\" v-model=\"createTable.about\"/>\n        </el-form-item>\n      </el-form>\n\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogFormVisible = false\">{{ '取消' }}</el-button>\n        <el-button type=\"primary\" @click=\"createSubmit()\">{{ '创建' }}</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { createDashboard, deleteDashboard, publishDashboard, downloadDashboard } from '@/api/dashboard'\nimport { mapGetters } from 'vuex'\nimport { fetchList } from '@/api/template'\n\nimport waves from '@/directive/waves' // Waves directive\nimport TemplateList from '@/components/Dashboard/Template'\nimport Pagination from '@/components/Pagination' // Secondary package based on el-pagination\nimport clip from '@/scripts/clipboard'\n\nconst publishTypeOptions = {\n  published: '已发布',\n  unpublish: '未发布'\n}\n\nexport default {\n  name: 'ManageDashboard',\n  components: { Pagination, TemplateList },\n  directives: { waves },\n  filters: {\n    statusFilter (status) {\n      return publishTypeOptions[status] || '未发布'\n    },\n    pubUrlFilter (hash) {\n      return hash ? window.location.protocol + '//' + window.location.host + '/dashboard/' + hash : ''\n    },\n    needRepublish (row) {\n      return row.publish.status !== 'published' || row.config.timestamp <= row.publish.timestamp\n    }\n  },\n  data () {\n    return {\n      delPopover: false,\n      tableKey: 0,\n      list: null,\n      total: 0,\n      listLoading: true,\n      listQuery: {\n        page: 1,\n        limit: 20,\n        title: undefined,\n        status: undefined\n      },\n      publishTypeOptions,\n      sortOptions: [{ label: 'ID Ascending', key: '+id' }, { label: 'ID Descending', key: '-id' }],\n      createTable: {},\n      templateList: null,\n      dialogTitle: '',\n      dialogFormVisible: false,\n      downloadLoading: false\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'userRouters'\n    ])\n  },\n  created () {\n    this.getList()\n  },\n  methods: {\n    getList () {\n      this.listLoading = true\n      this.$store.dispatch('GetUserDashboardList', this.listQuery).then(response => {\n        if (response.data.total > 0) {\n          this.serialList(response.data.items)\n        }\n        this.list = response.data.items\n        this.total = response.data.total || 0\n\n        // Just to simulate the time of the request\n        setTimeout(() => {\n          this.listLoading = false\n        }, 1.5 * 1000)\n      })\n    },\n    handleFilter () {\n      this.listQuery.page = 1\n      this.getList()\n    },\n    sortChange (data) {\n      const { prop, order } = data\n      if (prop === 'id') {\n        this.sortByID(order)\n      }\n    },\n    sortByID (order) {\n      if (order === 'ascending') {\n        this.listQuery.sort = '+id'\n      } else {\n        this.listQuery.sort = '-id'\n      }\n      this.handleFilter()\n    },\n    handleCopy (text, event) {\n      const pubUrlFilter = this.$options.filters['pubUrlFilter']\n\n      clip(pubUrlFilter(text), event)\n    },\n    resetTemp () {\n      this.createTable = {\n        name: '',\n        timestamp: Number(new Date()),\n        template: 'blank',\n        about: '',\n        mode: 'create'\n      }\n    },\n    handleCreate () {\n      fetchList().then(response => {\n        this.templateList = response.data.items\n      })\n\n      this.resetTemp()\n      this.dialogTitle = '新建大屏'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    handleClone (hash, title) {\n      this.resetTemp()\n      this.templateList = null\n      this.dialogTitle = '大屏克隆 - <' + title + '>'\n\n      this.createTable.template = hash\n      this.createTable.mode = 'clone'\n\n      this.dialogFormVisible = true\n    },\n    createSubmit () {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          createDashboard(this.createTable).then(response => {\n            // 跳转到编辑页面\n            this.$router.push('/edit/dashboard/' + response.hash)\n          })\n        }\n      })\n    },\n    handleUpdate (row) {\n      this.createTable = Object.assign({}, row) // copy obj\n      this.createTable.timestamp = new Date(this.createTable.timestamp)\n      this.dialogStatus = 'update'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    handleDelete: function (row) {\n      deleteDashboard(row.hash).then(response => {\n        this.$notify({\n          title: '成功',\n          message: '删除成功',\n          type: 'success',\n          duration: 2000\n        })\n        const index = this.list.indexOf(row)\n        this.list.splice(index, 1)\n        this.getList()\n      })\n    },\n    handleDownload (hash) {\n      this.downloadLoading = true\n      downloadDashboard(hash).then(response => {\n        if (response.code === 0) {\n          console.log(response)\n          window.location = process.env.BASE_API + '/' + response.data\n        }\n      })\n    },\n    handlePublish (param) {\n      publishDashboard(param.hash, param.cmd).then(response => {\n        this.$notify({\n          title: '成功',\n          message: '更新成功',\n          type: 'success',\n          duration: 2000\n        })\n\n        this.getList()\n      })\n    },\n    handleDesign (hash) {\n      this.$router.push('/edit/dashboard/' + hash)\n    },\n    handlePreview (hash) {\n      const routeUrl = this.$router.resolve({\n        path: '/preview/' + hash\n      })\n\n      window.open(routeUrl.href, '_blank')\n    },\n    serialList (list) {\n      for (let i = 0; i < list.length; i++) {\n        list[i]['sequenceNumber'] = i + 1\n      }\n    },\n    onSelectTemplate: function (data) {\n      this.createTable.template = data.hash\n    }\n  }\n}\n</script>\n\n<style>\n  .el-carousel__item h3 {\n    color: #475669;\n    font-size: 14px;\n    opacity: 0.75;\n    line-height: 100px;\n    margin: 0;\n  }\n\n  .el-carousel__item:nth-child(2n) {\n    background-color: #99a9bf;\n  }\n\n  .el-carousel__item:nth-child(2n+1) {\n    background-color: #d3dce6;\n  }\n</style>\n"]}